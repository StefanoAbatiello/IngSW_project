package it.polimi.ingsw.model.personalboard;

import it.polimi.ingsw.model.Player;
import it.polimi.ingsw.model.Resource;
import java.util.*;
import java.util.stream.*;

public class PersonalBoard {

    private final Player player;
    /**
     * this the player's Faith marker
     */
    private final FaithMarker faithMarker;

    /**
     * this is the player's Warehouse
     */
    private final WarehouseDepots warehouseDepots;

    /**
     * this is the player's Strongbox
     */
    private final StrongBox strongBox;

    /**
     * this is the player's board where he can put is Development cards
     */
    private final DevCardSlot devCardSlot;

    /**
     * if present, this is an ArrayList of the Special Shelves generated by Leader cards
     */
    private ArrayList<Optional<SpecialShelf>> specialShelves;

    /**
     * create personal board with its component
     * @param player is the Player who own this PersonalBoard
     */
    public PersonalBoard(Player player){
        this.player = player;
        //System.out.println("creo il faithmarker");[Debug]
        faithMarker=new FaithMarker();
        //System.out.println("faithmarker creato, creo warehousedepots");[Debug]
        warehouseDepots=new WarehouseDepots();
        //System.out.println("warehousedepots creata, creo strongbox");[Debug]
        strongBox=new StrongBox();
        ArrayList<Resource> resources=new ArrayList<>();
        for(int i=0;i<5;i++){
            resources.add(Resource.COIN);
            resources.add(Resource.STONE);
            resources.add(Resource.SHIELD);
            resources.add(Resource.SERVANT);
        }
        strongBox.addInStrongbox(resources);
        //System.out.println("strongbox creata, creo devslot");[Debug]
        devCardSlot=new DevCardSlot();
        //System.out.println("devslot creati, creo specialshelf");[Debug]
        specialShelves = new ArrayList<>();

    }

    public ArrayList<Optional<SpecialShelf>> getSpecialShelves() {
        return specialShelves;
    }

    public FaithMarker getFaithMarker() {
        return faithMarker;
    }

    public WarehouseDepots getWarehouseDepots() {
        return warehouseDepots;
    }

    public StrongBox getStrongBox() {
        return strongBox;
    }

    public DevCardSlot getDevCardSlot() {
        return devCardSlot;
    }

    /**
     * @param requiredResources are resources that we want check if they are in warehouse or in strongbox
     * @param playersResources is the ArrayList of resources where check if there are the required Resources
     * @return true if resources are contained, false otherwise
     */
    public boolean checkResourcesForUsages(ArrayList<Resource> requiredResources, ArrayList<Resource> playersResources){
        for(Resource resource: requiredResources){
            if (playersResources.contains(resource)) {
                playersResources.remove(resource);
            }else {
                return false;
            }
        }
        return true;
    }

    /**
     * @param resources are that to delete
     * @return all resources to delete
     */
    public ArrayList<Resource> removeResources(ArrayList<Resource> resources)  {
        for(Resource resource:resources){
            if(warehouseDepots.getResources().contains(resource)){
                warehouseDepots.removeResource(resource);
            }
            else if(!specialShelves.isEmpty()) {
                for(int i=0; i<2;i++) {
                    if (specialShelves.get(i).isPresent() && specialShelves.get(i).get().getResourceType().equals(resource))
                        specialShelves.get(i).get().getSpecialSlots().remove(resource);
                }
            }
            else strongBox.getStrongboxContent().remove(resource);
        }
        return resources;
    }

    /**
     * @return a simplified version of the Warehouse and Resources stored in it
     */
    public ArrayList<String>[] getSimplifiedWarehouse() {
        ArrayList<String>[] warehouse = new ArrayList[5];
        for(int i=0;i<5;i++) {
            warehouse[i] = new ArrayList<>();
        }
        for(int i=0;i<warehouseDepots.getShelves().length;i++) {
            int finalI = i;
            warehouseDepots.getShelves()[i].getSlots().forEach(resource -> warehouse[finalI].add(String.valueOf(resource)));
        }
        //warehouseDepots.getShelves()[0].getSlots().forEach(resource -> warehouse[0].add(String.valueOf(resource)));
        //warehouseDepots.getShelves()[1].getSlots().forEach(resource -> warehouse[1].add(String.valueOf(resource)));
        //warehouseDepots.getShelves()[2].getSlots().forEach(resource -> warehouse[2].add(String.valueOf(resource)));
        if(!getSpecialShelves().isEmpty()) {
            getSpecialShelves().get(0).ifPresent(specialShelf ->
                specialShelf.getSpecialSlots().forEach(resource -> warehouse[3].add(String.valueOf(resource))));
            getSpecialShelves().get(1).ifPresent(specialShelf ->
                specialShelf.getSpecialSlots().forEach(resource -> warehouse[4].add(String.valueOf(resource))));
        }
        return warehouse;
    }

    /**
     * @return a simplified version of the Strongbox and Resources stored in it
     */
    public int[] getSimplifiedStrongbox(){
        int[] strongbox=new int[4];
        ArrayList<Resource> resources=getStrongBox().getStrongboxContent();
        for (Resource resource:resources) {
            switch (resource) {
                case COIN:
                    strongbox[0]++;
                    break;
                case SERVANT:
                    strongbox[1]++;
                    break;
                case SHIELD:
                    strongbox[2]++;
                    break;
                case STONE:
                    strongbox[3]++;
                    break;
            }
        }
        return strongbox;
    }
}

